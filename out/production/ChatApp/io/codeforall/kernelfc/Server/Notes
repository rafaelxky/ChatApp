// create a server
    // ServerSocket();
    // client socket, Socket();
    // Server thread
    // Listen for connections
    // Send data to client

// make it threaded
    // server thread creates new thread for each connection
    // (client handler)
    // server has broadcast method to send data to all connections
    // server receives data and broadcasts
    // ideas:
        // use cached thread pool (
            ExecutorService userHandlerPool = Executors.newCachedThreadPool();
            userHandlerPool.submit(new classExecutable());
            userHandlerPool.shutdown();
            userHandlerPool.shutdownNow();
            )
        // threads:
            // new Thread(new runnableClass);
            // thread.start
            // or
            //  new runnableClass();
            //  runnableClass.run();

        // runnable
            // new thread();
            // extend thread
            // implement Runnable

// implement commands
    // /quit - closes connection
    // /list - lists all connected users
    // /wisper <name> <message> - send private message
    // commands dont get broadcast to users
    // ideas:
        // use an array for the commands
        // create a command object

// classes/methods
    // server
        // server loop
        // send
        // listenAndCreateThread
        // broadcast
        // create socket
        // Executor Service
        // socket

    // clientHandler
        // String data
        // broadcast
        // send

// netcat test:
nc 127.0.0.1 9005